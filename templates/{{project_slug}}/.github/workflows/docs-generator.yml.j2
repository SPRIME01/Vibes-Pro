{# Docs generator CI template #}
{%- set python_versions = python_versions | default(['3.12']) -%}
{%- set node_versions = node_versions | default(['20']) -%}

name: Docs generator CI
permissions:
	contents: read

on:
	push:
		branches: [main, feature/**]
	pull_request:
		branches: [main]
	workflow_dispatch:
		inputs:
			run_conversion:
				description: "Run pandoc conversion tests (html/docx/epub)"
				required: false
				default: "false"

concurrency:
	group: {% raw %}docs-${{ github.ref }}{% endraw %}
	cancel-in-progress: true

jobs:
	test-docs-generator:
		runs-on: ubuntu-latest

		strategy:
			matrix:
				python: {{ python_versions }}
				node: {{ node_versions }}

		steps:
			- name: Checkout
				uses: actions/checkout@v4

			- name: Setup pnpm
				uses: pnpm/action-setup@v3
				with:
					run_install: false

			- name: Setup Node
				uses: actions/setup-node@v4
				with:
					node-version: {% raw %}${{ matrix.node }}{% endraw %}
					cache: "pnpm"
					cache-dependency-path: pnpm-lock.yaml

			- name: Verify pnpm installation
				run: pnpm --version

			- name: Set up Python
				uses: actions/setup-python@v5
				with:
					python-version: {% raw %}${{ matrix.python }}{% endraw %}

			- name: Install uv
				uses: astral-sh/setup-uv@v2

			- name: Install Node deps
				run: pnpm install --frozen-lockfile

			- name: Install Python deps
				run: uv sync --group dev --all-extras --frozen

			- name: Run docs generator integration test
				run: uv run python -m pytest -q tests/test_docs_generator_integration.py

			- name: Run generator and validate output
				run: uv run python tools/docs/generator.py --project-name ci-test --output-dir tmpdocs --validate

			- name: Upload tmpdocs artifact
				uses: actions/upload-artifact@v4
				with:
					name: tmpdocs
					path: tmpdocs

	conversion-tests:
		if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_conversion == 'true')
		runs-on: ubuntu-latest
		needs: test-docs-generator

		strategy:
			matrix:
				python: {{ python_versions }}
				node: {{ node_versions }}

		steps:
			- name: Checkout
				uses: actions/checkout@v4

			- name: Setup pnpm
				uses: pnpm/action-setup@v3
				with:
					run_install: false

			- name: Setup Node
				uses: actions/setup-node@v4
				with:
					node-version: {% raw %}${{ matrix.node }}{% endraw %}
					cache: "pnpm"
					cache-dependency-path: pnpm-lock.yaml

			- name: Verify pnpm installation
				run: pnpm --version

			- name: Set up Python
				uses: actions/setup-python@v5
				with:
					python-version: {% raw %}${{ matrix.python }}{% endraw %}

			- name: Install uv
				uses: astral-sh/setup-uv@v2

			- name: Install Node deps
				run: pnpm install --frozen-lockfile

			- name: Download and install pinned pandoc (3.8 linux-amd64)
				run: |
					set -euo pipefail
					PANDOC_URL=https://github.com/jgm/pandoc/releases/download/3.8/pandoc-3.8-linux-amd64.tar.gz
					curl -L "$PANDOC_URL" -o /tmp/pandoc.tar.gz
					mkdir -p /tmp/pandoc && tar -xzf /tmp/pandoc.tar.gz -C /tmp/pandoc --strip-components=1
					sudo cp /tmp/pandoc/bin/pandoc /usr/local/bin/
					sudo chmod +x /usr/local/bin/pandoc
					pandoc --version

			- name: Install Python deps
				run: uv sync --group dev --all-extras --frozen

			- name: Run conversion test (html)
				run: |
					rm -rf tmpdocs-html || true
					uv run python tools/docs/generator.py --project-name ci-test --output-dir tmpdocs-html --format html --validate
					if [ ! -f tmpdocs-html/README.html ]; then
						echo "ERROR: README.html not produced"
						ls -la tmpdocs-html
						exit 2
					fi

			- name: Upload tmpdocs-html artifact
				uses: actions/upload-artifact@v4
				with:
					name: tmpdocs-html
					path: tmpdocs-html
