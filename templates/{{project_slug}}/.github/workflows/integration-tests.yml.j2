{# Integration Tests workflow template #}
name: Integration Tests
permissions:
	contents: read

on:
	push:
		branches: [main, develop, "feature/phase-5"]

concurrency:
	group: {% raw %}integration-${{ github.ref }}{% endraw %}
	cancel-in-progress: true

jobs:
	project-generation:
		name: Project Generation Tests
		runs-on: ubuntu-latest
		strategy:
			matrix:
				architecture: [hexagonal, layered]
				ai_enabled: [true, false]
				framework: [next, remix]
		steps:
			- name: Checkout repository
				uses: actions/checkout@v4

			- name: Setup pnpm
				uses: pnpm/action-setup@v3
				with:
					run_install: false

			- name: Setup Node.js
				uses: actions/setup-node@v4
				with:
					node-version: "20"
					cache: "pnpm"

			- name: Set up Python
				uses: actions/setup-python@v5
				with:
					python-version: "3.12"

			- name: Install uv
				uses: astral-sh/setup-uv@v2

			- name: Install dependencies
				run: pnpm install --frozen-lockfile

			- name: Install Copier
				run: uv tool install copier

			- name: Run project generation tests
				run: pnpm test:integration tests/integration/project-generation.test.ts --passWithNoTests
				env:
					TEST_ARCHITECTURE: {% raw %}${{ matrix.architecture }}{% endraw %}
					TEST_AI_ENABLED: {% raw %}${{ matrix.ai_enabled }}{% endraw %}
					TEST_FRAMEWORK: {% raw %}${{ matrix.framework }}{% endraw %}

	end-to-end:
		name: End-to-End Integration
		runs-on: ubuntu-latest
		needs: project-generation

		steps:
			- name: Checkout repository
				uses: actions/checkout@v4

			- name: Setup pnpm
				uses: pnpm/action-setup@v3
				with:
					run_install: false

			- name: Setup Node.js
				uses: actions/setup-node@v4
				with:
					node-version: "20"
					cache: "pnpm"

			- name: Set up Python
				uses: actions/setup-python@v5
				with:
					python-version: "3.12"

			- name: Install uv
				uses: astral-sh/setup-uv@v2

			- name: Install dependencies
				run: pnpm install --frozen-lockfile

			- name: Install system dependencies
				run: |
					uv tool install copier
					curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
					source ~/.cargo/env

			- name: Run end-to-end tests
				run: pnpm test:integration tests/integration/end-to-end.test.ts --passWithNoTests
				timeout-minutes: 15

	performance-benchmarks:
		name: Performance Benchmarks
		runs-on: ubuntu-latest

		steps:
			- name: Checkout repository
				uses: actions/checkout@v4

			- name: Setup pnpm
				uses: pnpm/action-setup@v3
				with:
					run_install: false

			- name: Setup Node.js
				uses: actions/setup-node@v4
				with:
					node-version: "20"
					cache: "pnpm"

			- name: Set up Python
				uses: actions/setup-python@v5
				with:
					python-version: "3.12"

			- name: Install uv
				uses: astral-sh/setup-uv@v2

			- name: Install dependencies
				run: |
					pnpm install --frozen-lockfile
					uv tool install copier

			- name: Run performance tests
				run: pnpm test:integration tests/integration/performance.test.ts --passWithNoTests
				timeout-minutes: 10

			- name: Upload performance results
				uses: actions/upload-artifact@v4
				if: always()
				with:
					name: performance-results
					path: performance-results.json

	ai-workflows:
		name: AI Workflows Validation
		runs-on: ubuntu-latest

		steps:
			- name: Checkout repository
				uses: actions/checkout@v4

			- name: Setup pnpm
				uses: pnpm/action-setup@v3
				with:
					run_install: false

			- name: Setup Node.js
				uses: actions/setup-node@v4
				with:
					node-version: "20"
					cache: "pnpm"

			- name: Set up Python
				uses: actions/setup-python@v5
				with:
					python-version: "3.12"

			- name: Install uv
				uses: astral-sh/setup-uv@v2

			- name: Install dependencies
				run: |
					pnpm install --frozen-lockfile
					uv tool install copier

			- name: Run AI workflow tests
				run: pnpm test:integration tests/integration/ai-workflows.test.ts --passWithNoTests

	integration-summary:
		name: Integration Test Summary
		runs-on: ubuntu-latest
		needs:
			[project-generation, end-to-end, performance-benchmarks, ai-workflows]
		if: always()

		steps:
			- name: Check test results
				run: |
					echo "Project Generation: {% raw %}${{ needs['project-generation'].result }}{% endraw %}"
					echo "End-to-End: {% raw %}${{ needs['end-to-end'].result }}{% endraw %}"
					echo "Performance Benchmarks: {% raw %}${{ needs['performance-benchmarks'].result }}{% endraw %}"
					echo "AI Workflows: {% raw %}${{ needs['ai-workflows'].result }}{% endraw %}"

					if [[ "{% raw %}${{ needs['project-generation'].result }}{% endraw %}" == "success" &&
								"{% raw %}${{ needs['end-to-end'].result }}{% endraw %}" == "success" &&
								"{% raw %}${{ needs['performance-benchmarks'].result }}{% endraw %}" == "success" &&
								"{% raw %}${{ needs['ai-workflows'].result }}{% endraw %}" == "success" ]]; then
						echo "✅ All integration tests passed!"
						exit 0
					else
						echo "❌ Some integration tests failed"
						exit 1
					fi
